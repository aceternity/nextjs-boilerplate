// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  superadmin
  customer
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  password      String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role           @default(customer)
  subscriptions  Subscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id String @id @default(cuid())

  productId String @unique

  name String

  active Boolean @default(false)

  defaultPriceId String?       @unique
  defaultPrice   ProductPrice? @relation(name: "defaultPrice", fields: [defaultPriceId], references: [priceId])

  description String?

  createdAt DateTime @default(now())

  updateAt DateTime @default(now())

  prices       ProductPrice[] @relation(name: "prices")
  subscriptions Subscription[]

  @@index([productId])
}

model ProductPrice {
  id String @id @default(cuid())

  priceId String @unique

  productId String
  product   Product @relation(name: "prices", fields: [productId], references: [productId], onDelete: Cascade)

  active      Boolean @default(false)
  description String

  currency String @default("USD")

  type String

  interval String?

  interval_count Int?

  unitAmount Float

  createdAt DateTime @default(now())

  updateAt DateTime @default(now())

  defaultPrice Product?       @relation(name: "defaultPrice")

  subscriptions Subscription[]

  @@index([priceId, productId])
}

model Subscription {
  id String @id @default(cuid())

  subscriptionId String @unique

  user User? @relation(fields: [userId], references: [id])

  userId String

  product Product @relation(fields: [productId], references: [productId])

  productId String

  price ProductPrice @relation(fields: [priceId], references: [priceId])

  priceId String

  status SubscriptionStatus @default(active)

  paymentCustomerId  String?

  startDate DateTime @default(now())

  endDate DateTime?

  createdAt DateTime @default(now())

  updateAt DateTime @default(now())

  @@index([subscriptionId])
}

enum SubscriptionStatus {
  active
  canceled
  paused
  incomplete
  incomplete_expired
  past_due
  trialing
  unpaid
}